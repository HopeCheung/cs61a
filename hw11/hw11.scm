(define (find s predicate)
  (cond ((null? s) #f)
		((predicate(car s))(car s))
		(else (find (cdr-stream s) predicate))
	)
)

(define (scale-stream s k)
  (cons-stream (* (car s) k) 
  	           (scale-stream (cdr-stream s) k))
)

(define (has-cycle s)
  (define (track curr s)
		(cond((null? s) #f)
			 ((null? (cdr-stream s)) #f)
			((eq? curr s) #t)
			(else (track (cdr-stream curr) (cdr-stream (cdr-stream s))))
		)
	)
	(track s (cdr-stream s))
)

(define (has-cycle-constant s)
   (define (track curr s)
		(cond((null? s) #f)
			 ((null? (cdr-stream s)) #f)
			((eq? curr s) #t)
			(else (track (cdr-stream curr) (cdr-stream (cdr-stream s))))
		)
	)
	(track s (cdr-stream s))
)
